 * Copyright 2012 John W. Krupansky d/b/a Base Technology
 * Licensed under the Apache License, Version 2.0

Introduction to the Base Technology Agent Server

This introduction is only a "light" introduction to agents and does not delves into the deep
conceptual basis or fine details of the agent model supported by the agent server. See concept.txt
for that deeper conceptual basis for agents.

To put it as simply as possible, a software agent is a long-running computer program that acts at least
semi-autonomously towards a goal on behalf of a user.

Although a software agent can be large, complex, and monolithic, the goal is for a user to have many
very small, very simple, very manageable agents collectively pursuing a user's many interests.

The agents supported by this agent server are smaller and more lightweight than traditional computer
programs or processes, and smaller and simpler and lighter-weight than even threads.

The secret, the magic of the agents supported by this server is not in the code that the user or
developer scripts, but in the very deep and rich infrastructure inside of the agent server. The
agent server itself provides much of the intelligence and competence for agents, so that the
individual agents can be rather simple and relatively dumb.

In fact, agents are generally completely idle or "quiescent", but always vigilant to any changes in
their environment that may interest their user. That vigilance comes from declarative instructions
in the agent definitions that are then followed by the deep, rich infrastructure within the server.

This idleness comes from the fact that agents are primarily declarative and the agent server
infrastructure takes care of all the bookkeeping to assure that the state of an agent is updated
whenever any of the agent's declared dependencies changes. In other words, the server takes care
of propagating changes.

Agents are long-running. Their internal state is maintained in a persistent store so that even if the
agent server is shut down or the host machine is rebooted, the state of every agent will be reliably
restored as if nothing had happened.
 
There are three concepts you need to be aware of to develop your own agents

1. Users. Agents belong to users.
2. Agent definitions. This is the "source code" for an agent.
3. Agent instances. These are running, active instances of the agent.

The agent server supports any number of users, each with their own user "Id".

The user defines or declares the definitions of the agents they need.

The user instantiates agent types as needed. Each instance of the same agent definition would
typically have different parameter values (e..g., a URL, the name of a person or place or product.)

Once an agent is running, the user can monitor its status and output and even change parameter values.

An agent can notify the user when conditions occur. Some of those notifications can be information-only,
which no response needed, while others can suspend the execution of the agent pending a confirmation or
choice response from the user.

Agents are completely transparent, so users can examine the full state of any agent at any time.

Users can manually pause, resume, and kill agents at any time as well.

There are actually two distinct types of agents:

1. Data source agents. These are the agents that directly access web resources, typically based on
a timer. They will read a web-based resource and then output all or a portion of its content as their
own output that can then be consumed by other agents.

2. Normal agents. Once data source agents are running that produced agent-based output, other agents
can then accept that output as inputs. Agents remain quiescent and are automatically activated by the
agent server whenever output becomes available from agents upon which they depend. This is basically
very similar to a data flow or constraint management system where the system (server) manages all
dependencies between agents.

In fact, the agent server will automatically instantiate the data source agents that are declared as
inputs for a normal agent.

Just to give a little perspective, the term "agent" has gotten thrown around a lot over the past two
decades. The agent server supports a much more refined use of the term, but here are some of the
traditional uses as well as concepts that are at least vaguely similar:

1. User Agents in the IETF RFCs. For example, a web browser is a "user agent."
2. System agents. Autonomous portions of the operating system.
3. Daemons. Email servers, web servers, file servers. Long-running, but not under user control.
4. Database triggers.
5. Email alerts. Under user control, but limited capabilities.

Now it is time to jump to tutorial.txt and start actually working with some real, live agents.

.
